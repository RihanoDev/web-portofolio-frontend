name: Deploy to Production

on:
  push:
    tags:
      - 'v*'  # Trigger ketika ada tag yang dimulai dengan 'v' (misal: v1.0.0, v2.1.3)

env:
  REGISTRY: docker.io
  IMAGE_NAME: rihanodev/web-porto-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: Build project
      run: |
        npm run build
      
    - name: Extract tag version
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.VERSION }}
          ${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.extract_version.outputs.VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}
          
    - name: Deploy to server
      if: github.ref_type == 'tag'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "üöÄ Starting deployment of ${{ steps.extract_version.outputs.VERSION }}..."
          
          # Pull latest image
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.VERSION }}
          
          # Stop and remove existing container
          docker stop web-porto-frontend || true
          docker rm web-porto-frontend || true
          
          # Run new container
          docker run -d \
            --name web-porto-frontend \
            --restart unless-stopped \
            -p 80:80 \
            --health-cmd="curl -f http://localhost/ || exit 1" \
            --health-interval=30s \
            --health-timeout=3s \
            --health-retries=3 \
            ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.VERSION }}
          
          # Clean up old images  
          docker image prune -af --filter "until=24h"
          
          # Wait for container to be healthy
          echo "‚è≥ Waiting for container to be ready..."
          timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" web-porto-frontend | grep -q "healthy"; do sleep 2; done' || true
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Site should be available at your server IP"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.extract_version.outputs.VERSION }}
        name: Release ${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## üöÄ Release ${{ steps.extract_version.outputs.VERSION }}
          
          ### ‚ú® What's New
          - Complete glass theme portfolio system
          - Mobile-optimized PDF viewer with smart fallbacks
          - Responsive navigation with mobile dropdown
          - Theme selector with mobile-friendly interface
          - Production-ready Docker deployment
          - Automated CI/CD pipeline
          
          ### üì¶ Docker Image
          ```bash
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.VERSION }}
          ```
          
          ### ÔøΩ Quick Deploy
          ```bash
          docker run -d --name web-porto -p 80:80 ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.VERSION }}
          ```
          
          ### üåê Live Demo
          The application has been automatically deployed to the production server.
        draft: false
        prerelease: false
      continue-on-error: true
